import { GatewayUrls, IpfsUploadBatchOptions, ThirdwebStorageOptions, UploadOptions, IThirdwebStorage, SingleDownloadOptions } from "@thirdweb-dev/storage";
import { UploadDataValue } from "./types";
export declare class ThirdwebStorage<T extends UploadOptions = IpfsUploadBatchOptions> implements IThirdwebStorage {
    private uploader;
    private downloader;
    private gatewayUrls;
    private clientId?;
    constructor(options?: ThirdwebStorageOptions<T>);
    /**
     * Resolve any scheme on a URL to get a retrievable URL for the data
     *
     * @param url - The URL to resolve the scheme of
     * @returns The URL with its scheme resolved
     *
     * @example
     * ```jsx
     * const uri = "ipfs://example";
     * const url = storage.resolveScheme(uri);
     * console.log(url);
     * ```
     */
    resolveScheme(url: string): string;
    /**
     * Downloads arbitrary data from any URL scheme.
     *
     * @param url - The URL of the data to download
     * @returns The response object fetched from the resolved URL
     *
     * @example
     * ```jsx
     * const uri = "ipfs://example";
     * const data = await storage.download(uri);
     * ```
     */
    download(url: string, options?: SingleDownloadOptions): Promise<Response>;
    /**
     * Downloads JSON data from any URL scheme.
     * Resolves any URLs with schemes to retrievable gateway URLs.
     *
     * @param url - The URL of the JSON data to download
     * @returns The JSON data fetched from the resolved URL
     *
     * @example
     * ```jsx
     * const uri = "ipfs://example";
     * const json = await storage.downloadJSON(uri);
     * ```
     */
    downloadJSON<TJSON = any>(url: string, options?: SingleDownloadOptions): Promise<TJSON>;
    /**
     * Upload arbitrary file or JSON data using the configured decentralized storage system.
     * Automatically uploads any file data within JSON objects and replaces them with hashes.
     *
     * @param data - Arbitrary file or JSON data to upload
     * @param options - Options to pass through to the storage uploader class
     * @returns - The URI of the uploaded data
     *
     * @example
     * ```jsx
     * // Upload an image
     * launchImageLibrary({mediaType: 'photo'}, async response => {
     *   if (response.assets?.[0]) {
     *      const {fileName, type, uri} = response.assets[0];
     *      if (!uri) {
     *        throw new Error('No uri');
     *      }
     *      const resp = await storage.upload({
     *        uri,
     *        type,
     *        name: fileName,
     *      });
     *    }
     *  });
     * const jsonUri = await storage.upload(json);
     * ```
     */
    upload(data: UploadDataValue, options?: T): Promise<string>;
    /**
     * Batch upload arbitrary file or JSON data using the configured decentralized storage system.
     * Automatically uploads any file data within JSON objects and replaces them with hashes.
     *
     * @param data - Array of arbitrary file or JSON data to upload
     * @param options - Options to pass through to the storage uploader class
     * @returns - The URIs of the uploaded data
     *
     * @example
     * ```jsx
     * // Upload an image
     * launchImageLibrary({mediaType: 'photo'}, async response => {
     *   if (response.assets?.[0]) {
     *      const {fileName, type, uri} = response.assets[0];
     *      if (!uri) {
     *        throw new Error('No uri');
     *      }
     *      const resp = await storage.upload({
     *        uri,
     *        type,
     *        name: fileName,
     *      });
     *    }
     *  });
     *
     * // Upload an array of JSON objects
     * const objects = [
     *  { name: "JSON 1", text: "Hello World" },
     *  { name: "JSON 2", trait: "Awesome" },
     * ];
     * const jsonUris = await storage.uploadBatch(objects);
     * ```
     */
    uploadBatch(data: UploadDataValue[], options?: T): Promise<string[]>;
    getGatewayUrls(): GatewayUrls;
}
