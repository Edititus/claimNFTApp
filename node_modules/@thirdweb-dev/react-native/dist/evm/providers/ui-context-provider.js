import { createContext, useContext, useMemo, useState } from "react";
import { _darkTheme, _lightTheme } from "../styles/theme";
import { useAppTheme } from "../styles/hooks";
import { useTheme } from "@shopify/restyle";
import { setLocale } from "../i18n/strings";
const UIContext = createContext({
    modalState: {
        view: "Closed",
        data: {},
        isOpen: false,
        isSheet: true,
        caller: "init",
    },
    setModalState: () => undefined,
    theme: "light",
    setTheme: () => undefined,
    locale: "en",
});
export const UIContextProvider = (props) => {
    const [modalState, setModalState] = useState({
        view: "Closed",
        data: {},
        isOpen: false,
        isSheet: true,
        caller: "init",
    });
    const providerTheme = useAppTheme();
    const [theme, setTheme] = useState(providerTheme);
    return (<UIContext.Provider value={{
            modalState,
            setModalState,
            theme,
            setTheme,
            locale: props.locale,
        }}>
      {props.children}
    </UIContext.Provider>);
};
export const useUIContext = () => {
    return useContext(UIContext);
};
export const useModalState = () => {
    const context = useContext(UIContext);
    return {
        modalState: context.modalState,
        setModalState: context.setModalState,
    };
};
export const useLocale = () => {
    const context = useContext(UIContext);
    return setLocale(context.locale);
};
const getThemeObj = (theme) => {
    if (theme === "dark" || !theme) {
        return _darkTheme;
    }
    else if (theme === "light") {
        return _lightTheme;
    }
    else {
        return theme;
    }
};
export const useGlobalTheme = (theme) => {
    const context = useContext(UIContext);
    const appTheme = useTheme();
    const resultTheme = useMemo(() => {
        const resp = getThemeObj(context.theme) || getThemeObj(theme) || appTheme;
        return resp;
    }, [theme, context, appTheme]);
    return resultTheme;
};
