export declare function setUpNewUserWallet(recoveryCode: string, clientId: string): Promise<{
    recoveryCode: string;
} & import("@paperxyz/embedded-wallet-service-sdk").WalletAddressObjectType & {
    deviceShareStored: string;
    isIframeStorageEnabled: boolean;
}>;
/**
 * Store user's wallet shares. Encrypts authShare and recoveryShare as given clientSide as well.
 * @param {string} walletAddress the user's wallet address. Note that for each logged in user and clientId, we have a single walletAddress. This will error if we attempt to store shares for user's with an existing wallet different from the walletAddress
 * @param {string} authShare the *unencrypted* authShare for the user
 * @param {string} recoveryShare the *unencrypted* recovery share for the user
 * @throws if another walletAddress already exists
 */
export declare function storeShares<R extends string | undefined>({ clientId, walletAddress, authShare, deviceShare, recoveryShares, }: {
    clientId: string;
    walletAddress: string;
    authShare?: string;
    deviceShare?: string;
    recoveryShares?: R extends string ? {
        share: R;
        recoveryCode: string;
    }[] : never;
}): Promise<{
    deviceShareStored: string;
} | undefined>;
