import { providers } from "ethers";
import { utils } from "ethers";
import { customJwt, sendVerificationEmail, socialLogin, validateEmailOTP, } from "./embedded/auth";
import { getEthersSigner } from "./embedded/signer";
import { logoutUser } from "./embedded/helpers/auth/logout";
import { clearConnectedEmail, getConnectedEmail, saveConnectedEmail, } from "./embedded/helpers/storage/local";
import { AuthProvider, Connector, RecoveryShareManagement, UserWalletStatus, normalizeChainId, } from "@thirdweb-dev/wallets";
import { isValidUserManagedEmailOtp } from "./embedded/helpers/api/fetchers";
export class EmbeddedWalletConnector extends Connector {
    constructor(options) {
        super();
        this.onAccountsChanged = async (accounts) => {
            if (accounts.length === 0) {
                await this.onDisconnect();
            }
            else {
                this.emit("change", {
                    account: utils.getAddress(accounts[0]),
                });
            }
        };
        this.onChainChanged = (chainId) => {
            const id = normalizeChainId(chainId);
            const unsupported = this.options.chains.findIndex((c) => c.chainId === id) === -1;
            this.emit("change", { chain: { id, unsupported } });
        };
        this.onDisconnect = async () => {
            this.removeListeners();
            this.emit("disconnect");
        };
        this.options = options;
        this.email = getConnectedEmail();
    }
    async connect(options) {
        try {
            await this.getSigner();
        }
        catch (error) {
            throw new Error(`Error fetching the signer: ${error}`);
        }
        this.setupListeners();
        if (options?.chainId) {
            await this.switchChain(options.chainId);
        }
        if (this.email) {
            saveConnectedEmail(this.email);
        }
        return this.getAddress();
    }
    async authenticate(params) {
        const strategy = params.strategy;
        switch (strategy) {
            case "email_verification": {
                return await this.validateEmailOTP({
                    email: params.email,
                    otp: params.verificationCode,
                    recoveryCode: params.recoveryCode,
                });
            }
            case "google": {
                return this.socialLogin({
                    provider: AuthProvider.GOOGLE,
                    redirectUrl: params.redirectUrl,
                });
            }
            case "jwt": {
                return this.customJwt({
                    jwt: params.jwt,
                    password: params.encryptionKey || "",
                });
            }
            default:
                assertUnreachable(strategy);
        }
    }
    async validateEmailOTP(options) {
        try {
            const { storedToken } = await validateEmailOTP({
                email: options.email,
                clientId: this.options.clientId,
                otp: options.otp,
                recoveryCode: options.recoveryCode,
            });
            return {
                user: {
                    status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
                    recoveryShareManagement: storedToken.authDetails.recoveryShareManagement,
                },
                isNewUser: storedToken.isNewUser,
                needsRecoveryCode: storedToken.authDetails.recoveryShareManagement ===
                    RecoveryShareManagement.USER_MANAGED,
            };
        }
        catch (error) {
            console.error(`Error while validating otp: ${error}`);
            if (error instanceof Error) {
                throw new Error(`Error while validating otp: ${error.message}`);
            }
            else {
                throw new Error("An unknown error occurred while validating otp");
            }
        }
    }
    async isValidUserManagedEmailOTP(options) {
        try {
            const result = await isValidUserManagedEmailOtp({
                clientId: this.options.clientId,
                email: this.email || "",
                otp: options.otp,
            });
            if (result.isValid) {
                return result;
            }
            else {
                throw new Error("Invalid otp, please try again.");
            }
        }
        catch (error) {
            throw new Error(`Error validating otp: ${error}`);
        }
    }
    async sendVerificationEmail(options) {
        this.email = options.email;
        return sendVerificationEmail({
            email: options.email,
            clientId: this.options.clientId,
        });
    }
    async socialLogin(oauthOption) {
        try {
            const { storedToken, email } = await socialLogin(oauthOption, this.options.clientId);
            this.email = email;
            saveConnectedEmail(email);
            return {
                user: {
                    status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
                    recoveryShareManagement: storedToken.authDetails.recoveryShareManagement,
                },
                isNewUser: storedToken.isNewUser,
                needsRecoveryCode: storedToken.authDetails.recoveryShareManagement ===
                    RecoveryShareManagement.USER_MANAGED,
            };
        }
        catch (error) {
            console.error(`Error while signing in with: ${oauthOption.provider}. ${error}`);
            if (error instanceof Error) {
                throw new Error(`Error logging in with ${oauthOption.provider}: ${error.message}`);
            }
            else {
                throw new Error(`An unknown error occurred logging in with ${oauthOption.provider}`);
            }
        }
    }
    async customJwt(authOptions) {
        try {
            const { verifiedToken, email } = await customJwt(authOptions, this.options.clientId);
            this.email = email;
            return {
                user: {
                    status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
                    recoveryShareManagement: verifiedToken.authDetails.recoveryShareManagement,
                },
                isNewUser: verifiedToken.isNewUser,
                needsRecoveryCode: verifiedToken.authDetails.recoveryShareManagement ===
                    RecoveryShareManagement.USER_MANAGED,
            };
        }
        catch (error) {
            console.error(`Error while verifying auth: ${error}`);
            this.disconnect();
            throw error;
        }
    }
    async disconnect() {
        clearConnectedEmail();
        await logoutUser(this.options.clientId);
        await this.onDisconnect();
        this.signer = undefined;
    }
    async getAddress() {
        const signer = await this.getSigner();
        return signer.getAddress();
    }
    async isConnected() {
        try {
            const addr = await this.getAddress();
            return !!addr;
        }
        catch (e) {
            return false;
        }
    }
    async getProvider() {
        const signer = await this.getSigner();
        if (!signer.provider) {
            throw new Error("Provider not found");
        }
        return signer.provider;
    }
    async getSigner() {
        if (this.signer) {
            return this.signer;
        }
        const signer = await getEthersSigner(this.options.clientId);
        if (!signer) {
            throw new Error("Error fetching the signer");
        }
        this.signer = signer;
        if (this.options.chain.chainId) {
            this.signer = this.signer.connect(new providers.JsonRpcProvider(this.options.chain.rpc[0]));
        }
        return signer;
    }
    async isAuthorized() {
        return this.isConnected();
    }
    async switchChain(chainId) {
        const chain = this.options.chains.find((c) => c.chainId === chainId);
        if (!chain) {
            throw new Error("Chain not configured");
        }
        // update signer
        this.signer = await getEthersSigner(this.options.clientId);
        this.signer = this.signer.connect(new providers.JsonRpcProvider(chain.rpc[0]));
        this.emit("change", { chain: { id: chainId, unsupported: false } });
    }
    async setupListeners() {
        const provider = await this.getProvider();
        if (provider.on) {
            provider.on("accountsChanged", this.onAccountsChanged);
            provider.on("chainChanged", this.onChainChanged);
            provider.on("disconnect", this.onDisconnect);
        }
    }
    async removeListeners() {
        if (!this.signer) {
            return;
        }
        const provider = await this.getProvider();
        if (provider.off) {
            provider.off("accountsChanged", this.onAccountsChanged);
            provider.off("chainChanged", this.onChainChanged);
            provider.off("disconnect", this.onDisconnect);
        }
    }
    updateChains(chains) {
        this.options.chains = chains;
    }
    getEmail() {
        return this.email;
    }
}
function assertUnreachable(x) {
    throw new Error("Invalid param: " + x);
}
