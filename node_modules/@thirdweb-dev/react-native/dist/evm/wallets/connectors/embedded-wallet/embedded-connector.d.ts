import { AuthParams, AuthResult, EmbeddedWalletConnectionArgs, EmbeddedWalletConnectorOptions, SendEmailOtpReturnType } from "./types";
import type { Chain } from "@thirdweb-dev/chains";
import { providers, Signer } from "ethers";
import { Connector } from "@thirdweb-dev/wallets";
export declare class EmbeddedWalletConnector extends Connector<EmbeddedWalletConnectionArgs> {
    private options;
    signer?: Signer;
    email?: string;
    constructor(options: EmbeddedWalletConnectorOptions);
    connect(options?: EmbeddedWalletConnectionArgs): Promise<string>;
    authenticate(params: AuthParams): Promise<AuthResult>;
    private validateEmailOTP;
    isValidUserManagedEmailOTP(options: {
        otp: string;
    }): Promise<import("./types").IsValidUserManagedEmailOTPResponse>;
    sendVerificationEmail(options: {
        email: string;
    }): Promise<SendEmailOtpReturnType>;
    private socialLogin;
    private customJwt;
    disconnect(): Promise<void>;
    getAddress(): Promise<string>;
    isConnected(): Promise<boolean>;
    getProvider(): Promise<providers.Provider>;
    getSigner(): Promise<Signer>;
    isAuthorized(): Promise<boolean>;
    switchChain(chainId: number): Promise<void>;
    setupListeners(): Promise<void>;
    removeListeners(): Promise<void>;
    updateChains(chains: Chain[]): void;
    protected onAccountsChanged: (accounts: string[]) => Promise<void>;
    protected onChainChanged: (chainId: number | string) => void;
    protected onDisconnect: () => Promise<void>;
    getEmail(): string | undefined;
}
