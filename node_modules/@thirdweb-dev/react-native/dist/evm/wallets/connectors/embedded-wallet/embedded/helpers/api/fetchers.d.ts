import { CognitoUserSession } from "amazon-cognito-identity-js";
import { RecoveryShareManagement, UserWalletStatus } from "@thirdweb-dev/wallets";
import { IsValidUserManagedEmailOTPResponse, VerifiedTokenResponse } from "../../../types";
export declare const verifyClientId: (clientId: string) => Promise<{
    success: boolean;
}>;
export declare const authFetchEmbeddedWalletUser: ({ clientId }: {
    clientId: string;
}, url: Parameters<typeof fetch>[0], props: Parameters<typeof fetch>[1]) => Promise<Response>;
export declare function getEmbeddedWalletUserDetail(args: {
    email?: string;
    clientId: string;
}): Promise<{
    isNewUser: true;
    recoveryShareManagement: RecoveryShareManagement;
    status: UserWalletStatus;
    walletUserId: string;
} | {
    isNewUser: false;
    walletUserId: string;
    recoveryShareManagement: RecoveryShareManagement;
    status: UserWalletStatus;
}>;
export declare function generateAuthTokenFromCognitoEmailOtp(session: CognitoUserSession, clientId: string): Promise<VerifiedTokenResponse>;
export declare function sendUserManagedEmailOtp(email: string, clientId: string): Promise<any>;
export declare function validateUserManagedEmailOtp(options: {
    email: string;
    otp: string;
    clientId: string;
}): Promise<VerifiedTokenResponse>;
export declare function isValidUserManagedEmailOtp(options: {
    email: string;
    otp: string;
    clientId: string;
}): Promise<IsValidUserManagedEmailOTPResponse>;
export declare function storeUserShares({ clientId, walletAddress, maybeEncryptedRecoveryShares, authShare, }: {
    clientId: string;
    walletAddress: string;
    maybeEncryptedRecoveryShares?: {
        share: string;
        isClientEncrypted: boolean;
    }[];
    authShare?: string;
}): Promise<void>;
export declare function getUserShares(clientId: string, getShareUrl: URL): Promise<{
    authShare?: string | undefined;
    maybeEncryptedRecoveryShares?: string[] | undefined;
}>;
