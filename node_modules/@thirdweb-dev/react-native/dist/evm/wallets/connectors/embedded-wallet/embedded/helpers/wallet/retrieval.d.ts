import { SetUpWalletRpcReturnType } from "@paperxyz/embedded-wallet-service-sdk";
import { ethers } from "ethers";
export declare function getUserEtherJsWalletFromShares(args: {
    shares: string[];
}): ethers.Wallet;
/**
 * For users on a known device and logged in.
 * Will throw if called on a new device // user not logged in
 */
export declare function getExistingUserEtherJsWallet(clientId: string): Promise<ethers.Wallet>;
/**
 *
 * @param deviceShare retrieves the current share associated with the user's device.
 * @returns the requested shares
 * @throws if attempting to get {@param deviceShare} when it's not present
 */
export declare function getShares<A extends boolean, D extends boolean, R extends boolean>({ clientId, authShare, deviceShare, recoveryShare, }: {
    clientId: string;
    authShare: {
        toRetrieve: A;
    };
    recoveryShare: R extends true ? {
        toRetrieve: R;
        recoveryCode: string;
    } : {
        toRetrieve: R;
    };
    deviceShare: {
        toRetrieve: D;
    };
}): Promise<{
    authShare: A extends true ? string : undefined;
    recoveryShare: R extends true ? string : undefined;
    deviceShare: D extends true ? string : undefined;
}>;
export declare function getWalletShareById(shares: string[], id?: number): string;
export declare function getWalletAddressFromShares(shares: string[]): string;
export declare function setUpShareForNewDevice({ recoveryCode, clientId, }: {
    recoveryCode: string;
    clientId: string;
}): Promise<SetUpWalletRpcReturnType>;
