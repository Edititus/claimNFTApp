import { WalletOptions, AbstractClientWallet, EmbeddedWalletAdditionalOptions } from "@thirdweb-dev/wallets";
import type { EmbeddedWalletConnector } from "../../connectors/embedded-wallet/embedded-connector";
import { AuthParams, EmbeddedWalletConnectionArgs } from "../../connectors/embedded-wallet/types";
export type EmbeddedWalletOptions = WalletOptions<EmbeddedWalletAdditionalOptions>;
export declare class EmbeddedWallet extends AbstractClientWallet<EmbeddedWalletOptions, EmbeddedWalletConnectionArgs> {
    connector?: EmbeddedWalletConnector;
    options: EmbeddedWalletOptions;
    static sendVerificationEmail(options: {
        email: string;
        clientId: string;
    }): Promise<import("@thirdweb-dev/wallets").SendEmailOtpReturnType>;
    static meta: {
        name: string;
        iconURL: string;
    };
    static id: "embeddedWallet";
    constructor(options: EmbeddedWalletOptions);
    getConnector(): Promise<EmbeddedWalletConnector>;
    initializeConnector(): Promise<EmbeddedWalletConnector>;
    sendVerificationEmail(email: string): Promise<import("../../connectors/embedded-wallet/types").SendEmailOtpReturnType | undefined>;
    authenticate(params: AuthParams): Promise<import("../../connectors/embedded-wallet/types").AuthResult>;
    onConnected: () => void;
    onDisconnect: () => void;
    onChange: (payload: any) => Promise<void>;
    getEmail(): string | undefined;
    onEmailSent: ({ email }: {
        email: string;
    }) => void;
    setupListeners(): void;
    removeListeners(): void;
}
