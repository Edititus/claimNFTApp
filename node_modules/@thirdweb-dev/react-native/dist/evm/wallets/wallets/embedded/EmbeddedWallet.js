import { AbstractClientWallet, walletIds, } from "@thirdweb-dev/wallets";
import { EMAIL_WALLET_ICON } from "../../../assets/svgs";
export class EmbeddedWallet extends AbstractClientWallet {
    static async sendVerificationEmail(options) {
        const { sendVerificationEmail } = await import("../../connectors/embedded-wallet/embedded/auth");
        return sendVerificationEmail(options);
    }
    constructor(options) {
        super(EmbeddedWallet.id, options);
        this.onConnected = () => {
            this.emit("message", { type: "connected" });
        };
        this.onDisconnect = () => {
            this.removeListeners();
        };
        this.onChange = async (payload) => {
            if (payload.chain) {
                // chain changed
            }
            else if (payload.account) {
                //account change
            }
        };
        this.onEmailSent = ({ email }) => {
            this.emit("message", { type: "emailSent", data: email });
        };
        this.options = options;
        this.initializeConnector();
        this.setupListeners();
    }
    async getConnector() {
        if (!this.connector) {
            return await this.initializeConnector();
        }
        return this.connector;
    }
    async initializeConnector() {
        const { EmbeddedWalletConnector } = await import("../../connectors/embedded-wallet/embedded-connector");
        this.connector = new EmbeddedWalletConnector({
            ...this.options,
            clientId: this.options.clientId,
            chains: this.chains,
        });
        return this.connector;
    }
    async sendVerificationEmail(email) {
        return this.connector?.sendVerificationEmail({ email });
    }
    async authenticate(params) {
        const connector = (await this.getConnector());
        return connector.authenticate(params);
    }
    getEmail() {
        return this.connector?.getEmail();
    }
    setupListeners() {
        if (!this.connector) {
            return;
        }
        this.removeListeners();
        this.connector.on("emailSent", this.onEmailSent);
        this.connector.on("connected", this.onConnected);
        this.connector.on("disconnect", this.onDisconnect);
        this.connector.on("change", this.onChange);
    }
    removeListeners() {
        if (!this.connector) {
            return;
        }
        this.connector.removeListener("emailSent", this.onEmailSent);
        this.connector.removeListener("connected", this.onConnected);
        this.connector.removeListener("disconnect", this.onDisconnect);
        this.connector.removeListener("change", this.onChange);
    }
}
EmbeddedWallet.meta = {
    name: "Embedded Wallet",
    iconURL: EMAIL_WALLET_ICON,
};
EmbeddedWallet.id = walletIds.embeddedWallet;
