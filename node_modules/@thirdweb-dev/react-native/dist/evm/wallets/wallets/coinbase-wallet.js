import { noopStorage } from "../../../core/AsyncStorage";
import { CoinbaseWalletConnector } from "../connectors/coinbase-wallet";
import { AbstractClientWallet, WagmiAdapter, walletIds, } from "@thirdweb-dev/wallets";
import { COINBASE_ICON } from "../../assets/svgs";
export class CoinbaseWallet extends AbstractClientWallet {
    get walletName() {
        return "Coinbase Wallet";
    }
    constructor(options) {
        super(CoinbaseWallet.id, {
            ...options,
            walletStorage: new noopStorage(),
            walletId: "coinbase",
        });
        this.callbackURL = options.callbackURL;
    }
    async getConnector() {
        if (!this.connector) {
            const cbConnector = new CoinbaseWalletConnector({
                chains: this.chains,
                options: {
                    ...this.options,
                    callbackURL: this.callbackURL,
                },
            });
            cbConnector.on("connect", () => { });
            this.coinbaseConnector = cbConnector;
            this.connector = new WagmiAdapter(cbConnector);
            this.provider = await this.coinbaseConnector.getProvider();
        }
        return this.connector;
    }
}
CoinbaseWallet.meta = {
    name: "Coinbase Wallet",
    iconURL: COINBASE_ICON,
};
CoinbaseWallet.id = walletIds.coinbase;
export const coinbaseWallet = (config) => {
    const callbackURLNonNull = config?.callbackURL || new URL("https://thirdweb.com/wsegue");
    return {
        id: CoinbaseWallet.id,
        meta: CoinbaseWallet.meta,
        create: (options) => new CoinbaseWallet({ ...options, callbackURL: callbackURLNonNull }),
        config: config,
        recommended: config?.recommended,
    };
};
