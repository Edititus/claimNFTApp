import { WalletDetailsButton, } from "./ConnectWalletDetails/WalletDetailsButton";
import { useAddress, useNetworkMismatch, useSwitchChain, useWalletContext, } from "@thirdweb-dev/react-core";
import { useEffect, useMemo, useRef, useState } from "react";
import { ActivityIndicator, Animated, StyleSheet } from "react-native";
import { ConnectWalletButton } from "./ConnectWalletFlow/ConnectWalletButton";
import BaseButton from "./base/BaseButton";
import Text from "./base/Text";
import { useLocale, useUIContext } from "../providers/ui-context-provider";
import { ThemeProvider } from "../styles/ThemeProvider";
import { defaultTokens } from "./SendFunds/defaultTokens";
export const ConnectWallet = ({ detailsButton, theme, buttonTitle, modalTitle, modalTitleIconUrl, extraRows, hideTestnetFaucet, displayBalanceToken, switchToActiveChain, termsOfServiceUrl, privacyPolicyUrl, supportedTokens, }) => {
    const l = useLocale();
    const fadeAnim = useRef(new Animated.Value(0)).current;
    const address = useAddress();
    const isNetworkMismatch = useNetworkMismatch();
    const { activeChainSetExplicitly } = useWalletContext();
    const { activeChain } = useWalletContext();
    const switchChain = useSwitchChain();
    const [switching, setSwitching] = useState(false);
    const setTheme = useUIContext().setTheme;
    useEffect(() => {
        Animated.timing(fadeAnim, {
            toValue: 1,
            duration: 300,
            useNativeDriver: true,
        }).start();
    }, [fadeAnim]);
    useEffect(() => {
        if (theme) {
            setTheme(theme);
        }
    }, [setTheme, theme]);
    const supportedTokensMemo = useMemo(() => {
        if (!supportedTokens) {
            return defaultTokens;
        }
        const tokens = { ...defaultTokens };
        for (const k in supportedTokens) {
            const key = Number(k);
            tokens[key] = supportedTokens[key];
        }
        return tokens;
    }, [supportedTokens]);
    return (<ThemeProvider theme={theme}>
      <Animated.View style={{ opacity: fadeAnim }}>
        {address ? (switchToActiveChain &&
            isNetworkMismatch &&
            activeChainSetExplicitly ? (<BaseButton backgroundColor="buttonBackgroundColor" onPress={async () => {
                setSwitching(true);
                try {
                    await switchChain(activeChain.chainId);
                }
                catch {
                    // ignore
                }
                setSwitching(false);
            }} style={styles.connectWalletButton}>
              {switching ? (<ActivityIndicator size="small" color="buttonTextColor"/>) : (<Text variant="bodyLarge" color="buttonTextColor">
                  {l.common.switch_network}
                </Text>)}
            </BaseButton>) : (<WalletDetailsButton address={address} detailsButton={detailsButton} extraRows={extraRows} hideTestnetFaucet={hideTestnetFaucet} supportedTokens={supportedTokensMemo} displayBalanceToken={displayBalanceToken}/>)) : (<ConnectWalletButton modalTitle={modalTitle} buttonTitle={buttonTitle} modalTitleIconUrl={modalTitleIconUrl} theme={theme} termsOfServiceUrl={termsOfServiceUrl} privacyPolicyUrl={privacyPolicyUrl}/>)}
      </Animated.View>
    </ThemeProvider>);
};
const styles = StyleSheet.create({
    connectWalletButton: {
        display: "flex",
        flexDirection: "row",
        alignContent: "center",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: 8,
        paddingHorizontal: 10,
        paddingVertical: 10,
        minWidth: 150,
    },
});
